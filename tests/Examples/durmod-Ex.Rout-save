
R Under development (unstable) (2019-06-26 r76741) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "durmod"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('durmod')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2p")
> ### * a2p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: a2p
> ### Title: Convert probability parameters to probabilities
> ### Aliases: a2p p2a
> 
> ### ** Examples
> 
> # Draw 5 parameters
> a <- rnorm(5)
> a
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> # make 6 probabilities
> p <- a2p(a)
> p
[1] 0.10537775 0.05632270 0.12662055 0.04569198 0.51948206 0.14650496
> # convert back
> p2a(p)
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> 
> 
> 
> 
> cleanEx()
> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate example data
> ### Aliases: datagen
> 
> ### ** Examples
> 
> data.table::setDTthreads(1)  # avoid screams from cran-testing
> dataset <- datagen(5000,80)
> print(dataset)
        id         x1         x2 alpha       d   duration
   1:    1 -0.6264538 -1.5163733     0     job  7.4733300
   2:    2 -1.7511652  1.6678368     0    none 21.0883942
   3:    2 -1.7511652  1.6678368     0 program 31.9567236
   4:    2 -2.1765086  0.6080587     1    none 18.7318467
   5:    2 -0.2168779 -2.0111217     1    none  8.2230356
  ---                                                    
8482: 4999 -0.7656566  0.1769227     1    none 49.9565221
8483: 4999 -1.3337031 -0.2165580     1    none  7.5066652
8484: 4999 -0.4771258 -1.7687763     1    none 10.0874160
8485: 5000  0.1715803  0.2573871     0 program  0.5136516
8486: 5000  0.1715803  0.2573871     1     job 22.3789752
> risksets <- list(c("job","program"), "job")
> # just two iterations to save time
> Fit <- mphcrm(d ~ x1+x2 + ID(id) + D(duration) + S(alpha+1) + C(job,alpha),
+           data=dataset, risksets=risksets,
+           control=mphcrm.control(threads=1,iters=2))
mphcrm 13:13:24 i:1 pts:1 L:-23896.5455 g:0.000727 mp:1 rcond:0.017 e:-0.0000 t:0.4s
mphcrm 13:13:25 i:2 pts:2 L:-23005.9081 g:3.07e-06 mp:0.25897 rcond:0.0066 e:0.5720 t:1.4s
> best <- Fit[[1]]
> print(best)
Estimate with 2 points, log-likelihood: -23005.9081
    job.x1     job.x2  job.alpha program.x1 program.x2      pargs 
 0.8471798 -0.6940881 -0.2245668  0.8780970  0.3458176 -1.0513492 

Proportional hazard distribution
              prob        job    program
point  1 0.7410339 0.13571081 0.08367258
point  2 0.2589661 0.01965928 0.01888237
> summary(best)
$loglik
[1] -23005.91

$coefs
                value         se          t      Pr(>|t|)
job.x1      0.8471798 0.01463274  57.896176  0.000000e+00
job.x2     -0.6940881 0.01323946 -52.425703  0.000000e+00
job.alpha  -0.2245668 0.03281194  -6.844058  8.232593e-12
program.x1  0.8780970 0.02209220  39.746931 5.465860e-317
program.x2  0.3458176 0.02178140  15.876743  5.841256e-56
pargs      -1.0513492 0.06156990 -17.075703  2.649547e-64

$moments
              mean     variance         sd
job     0.10565740 0.0025845370 0.05083834
program 0.06689411 0.0008055634 0.02838245

> 
> 
> 
> cleanEx()
> nameEx("durdata")
> ### * durdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durdata
> ### Title: Duration data
> ### Aliases: durdata fit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(durdata)
> print(durdata)
        id          x1         x2 alpha       d    duration
   1:    1 -0.03751376 -0.2949598     0     job  5.98661231
   2:    2 -1.57460441 -0.1697201     0     job 30.41322751
   3:    3 -0.48596752  0.2944295     0     job  1.97320112
   4:    4  0.46518623  0.7425005     0 program  0.06019839
   5:    4  0.46518623  0.7425005     1     job 12.98877267
  ---                                                      
8462: 4998 -0.26196992  0.7457557     1     job  0.76415906
8463: 4999 -0.66103827  0.6180780     0 program 16.81840591
8464: 4999 -0.66103827  0.6180780     1     job 40.90220834
8465: 5000  1.52003194  1.1746662     0 program  0.31553457
8466: 5000  1.52003194  1.1746662     1     job 11.56178865
> print(fit)
iter15: estimate with 15 points, log-likelihood: -22932.4875

    job.x1     job.x2  job.alpha program.x1 program.x2 
 0.8992605 -0.9072052  0.2242407  0.9098925  0.4738044 

Proportional hazard distribution
               prob        job    program
point  1 0.27421659 0.14138738 0.10686332
point  2 0.23438856 0.04747777 0.03704721
point  3 0.14481258 0.12128952 0.01071626
point  4 0.11542343 0.02054228 0.01527921
point  5 0.06447126 0.31279648 0.05343552
point  6 0.04746426 0.67902730 0.29020946
point  7 0.03515775 0.03499236 0.16567991
point  8 0.02199778 0.08678345 0.59454379
point  9 0.02106149 0.01008395 0.08115298
point 10 0.01813980 0.00567096 0.02909278
point 11 0.00743733 0.00272767 0.00379426
point 12 0.00645194 0.00240810 0.00000000
point 13 0.00582143 0.03179507 0.00000000
point 14 0.00314523 0.00367068 0.50491643
point 15 0.00001057 0.00838071 0.03249660

iter14: estimate with 14 points, log-likelihood: -22932.4875
iter13: estimate with 13 points, log-likelihood: -22932.8378
iter12: estimate with 12 points, log-likelihood: -22933.1099
iter11: estimate with 11 points, log-likelihood: -22933.5010
iter10: estimate with 10 points, log-likelihood: -22935.0882
iter9: estimate with 9 points, log-likelihood: -22936.3242
iter8: estimate with 8 points, log-likelihood: -22937.9582
iter7: estimate with 7 points, log-likelihood: -22938.4975
iter6: estimate with 6 points, log-likelihood: -22942.5330
iter5: estimate with 5 points, log-likelihood: -22950.4433
iter4: estimate with 4 points, log-likelihood: -22965.1207
iter3: estimate with 3 points, log-likelihood: -22989.6996
iter2: estimate with 2 points, log-likelihood: -23106.8269
iter1: estimate with 1 points, log-likelihood: -24065.4040
nullmodel: estimate with 1 points, log-likelihood: -27087.0860
> summary(fit[[1]])
$loglik
[1] -22932.49

$coefs
                value         se          t      Pr(>|t|)
job.x1      0.8992605 0.02133171  42.156042  0.000000e+00
job.x2     -0.9072052 0.02579306 -35.172458 4.514045e-253
job.alpha   0.2242407 0.07603352   2.949235  3.194333e-03
program.x1  0.9098925 0.03035943  29.970675 1.162070e-187
program.x2  0.4738044 0.03745831  12.648846  2.417523e-36

$moments
              mean   variance        sd
job     0.12591733 0.02074410 0.1440281
program 0.08127936 0.01076896 0.1037736

> 
> 
> 
> cleanEx()
> nameEx("geninv")
> ### * geninv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geninv
> ### Title: Moore-Penrose generalized inverse
> ### Aliases: geninv
> 
> ### ** Examples
> 
> # create a positive definite 5x5 matrix
> x <- crossprod(matrix(rnorm(25),5))
> # make it singular
> x[,2] <- x[,3]+x[,5]
> geninv(x)
            [,1]       [,2]        [,3]          [,4]        [,5]
[1,]  0.59600555  0.3834755  0.09734656 -0.1313454378  0.32338966
[2,]  0.11924663  0.1303762  0.03652770 -0.0006297084  0.12310145
[3,] -0.26835799 -0.9237478  0.18303012  0.3658260875 -0.61478567
[4,] -0.04643329 -0.1031814  0.12320759  0.6735326801 -0.05544032
[5,]  0.38760462  1.0541240 -0.14650242 -0.3664557958          NA
> 
> 
> 
> cleanEx()
> nameEx("mphcrm")
> ### * mphcrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm
> ### Title: Estimate a mixed proportional hazard model
> ### Aliases: mphcrm
> 
> ### ** Examples
> 
> data(durdata)
> head(durdata)
   id          x1         x2 alpha       d    duration
1:  1 -0.03751376 -0.2949598     0     job  5.98661231
2:  2 -1.57460441 -0.1697201     0     job 30.41322751
3:  3 -0.48596752  0.2944295     0     job  1.97320112
4:  4  0.46518623  0.7425005     0 program  0.06019839
5:  4  0.46518623  0.7425005     1     job 12.98877267
6:  5 -0.90409807 -1.7051721     0     job  2.98180289
> risksets <- list(c('job','program'), c('job'))
> Fit <- mphcrm(d ~ x1+x2 + C(job,alpha) + ID(id) + D(duration) + S(alpha+1), data=durdata, 
+      risksets=risksets, control=mphcrm.control(threads=1,iters=2))
mphcrm 13:13:25 i:1 pts:1 L:-24065.4040 g:0.000909 mp:1 rcond:0.019 e:-0.0000 t:0.2s
mphcrm 13:13:27 i:2 pts:2 L:-23106.8269 g:0.00042 mp:0.29108 rcond:0.011 e:0.6031 t:1.3s
> best <- Fit[[1]]
> summary(best)
$loglik
[1] -23106.83

$coefs
                value         se          t      Pr(>|t|)
job.x1      0.8269774 0.01488183  55.569597  0.000000e+00
job.x2     -0.7717202 0.01503873 -51.315514  0.000000e+00
job.alpha  -0.1194638 0.03658254  -3.265596  1.096684e-03
program.x1  0.8372713 0.02098297  39.902416 3.399172e-319
program.x2  0.3556178 0.02257321  15.753978  3.896153e-55
pargs      -0.8901408 0.05812543 -15.314137  3.073003e-52

$moments
              mean     variance         sd
job     0.10421110 0.0029010408 0.05386131
program 0.06358464 0.0009064858 0.03010790

> 
> 
> 
> cleanEx()
> nameEx("mphdist")
> ### * mphdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphdist
> ### Title: Extract the mixed proportional hazard distribution
> ### Aliases: mphdist mphdist.log mphmoments mphmoments.log mphcovs
> ###   mphcovs.log
> 
> ### ** Examples
> 
> # load a dataset and a precomputed fitted model
> data(durdata)
> best <- fit[[1]]
> mphdist(best)
                 prob         job      program
point  1 0.2742165917 0.141387380 1.068633e-01
point  2 0.2343885592 0.047477768 3.704721e-02
point  3 0.1448125784 0.121289519 1.071626e-02
point  4 0.1154234344 0.020542284 1.527921e-02
point  5 0.0644712632 0.312796475 5.343552e-02
point  6 0.0474642569 0.679027299 2.902095e-01
point  7 0.0351577467 0.034992360 1.656799e-01
point  8 0.0219977776 0.086783453 5.945438e-01
point  9 0.0210614945 0.010083954 8.115298e-02
point 10 0.0181397974 0.005670962 2.909278e-02
point 11 0.0074373322 0.002727666 3.794263e-03
point 12 0.0064519362 0.002408104 6.916668e-13
point 13 0.0058214269 0.031795070 7.991981e-12
point 14 0.0031452338 0.003670676 5.049164e-01
point 15 0.0000105708 0.008380709 3.249660e-02
> mphmoments(best)
              mean   variance        sd
job     0.12591733 0.02074410 0.1440281
program 0.08127936 0.01076896 0.1037736
> mphcovs.log(best)
               job   program
job     0.07560566 0.0546390
program 0.05463900 0.2377876
> 
> 
> 
> cleanEx()
> nameEx("timestr")
> ### * timestr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timestr
> ### Title: Prettyprint a time interval
> ### Aliases: timestr
> 
> ### ** Examples
> 
> timestr(1.3)
[1] "1.3s"
> timestr(73)
[1] "1m13s"
> timestr(4684)
[1] "1h18m"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.263 0.112 3.874 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
