
R Under development (unstable) (2019-06-27 r76743) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "durmod"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('durmod')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2p")
> ### * a2p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: a2p
> ### Title: Convert probability parameters to probabilities
> ### Aliases: a2p p2a
> 
> ### ** Examples
> 
> # Draw 5 parameters
> a <- rnorm(5)
> a
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> # make 6 probabilities
> p <- a2p(a)
> p
[1] 0.10537775 0.05632270 0.12662055 0.04569198 0.51948206 0.14650496
> # convert back
> p2a(p)
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> 
> 
> 
> 
> cleanEx()
> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate example data
> ### Aliases: datagen
> 
> ### ** Examples
> 
> data.table::setDTthreads(1)  # avoid screams from cran-testing
> dataset <- datagen(5000,80)
> print(dataset)
        id           x1         x2 alpha       d  duration     state
   1:    1 -0.626453811 -1.5163733     0     job  8.475950     unemp
   2:    2  0.183643324  0.6291412     0    none  6.067439     unemp
   3:    2  1.222338976  0.3455911     0    none  9.365923     unemp
   4:    2  0.796995558 -0.7141870     0     job  0.392882     unemp
   5:    3 -0.835628612 -1.6781940     0    none 23.167924     unemp
  ---                                                               
8584: 4999 -0.003494228  0.8939798     0 program  1.739756     unemp
8585: 4999 -0.003494228  0.8939798     1    none 67.404649 onprogram
8586: 5000  0.171580264  0.2573871     0    none 33.858670     unemp
8587: 5000  0.641995437  1.6364796     0 program  5.464844     unemp
8588: 5000  0.641995437  1.6364796     1    none 15.016888 onprogram
> risksets <- list(unemp=c("job","program"), onprogram="job")
> # just two iterations to save time
> Fit <- mphcrm(d ~ x1+x2 + ID(id) + D(duration) + S(alpha+1) + C(job,alpha),
+           data=dataset, risksets=risksets,
+           control=mphcrm.control(threads=1,iters=2))
mphcrm 17:02:12 i:1 p:1 L:-18110.6717 g:8.95e-05 mp:1 rc:0.0054 e:-0.0000 t:0.3s
mphcrm 17:02:13 i:2 p:2 L:-17630.5327 g:1.79e-06 mp:0.46941 rc:0.013 e:0.6913 t:1.1s
> best <- Fit[[1]]
> print(best)
Estimate with 2 points, log-likelihood: -17630.5327
     job.x1      job.x2   job.alpha  program.x1  program.x2 
 0.98920818 -0.88030436 -0.07639304  1.01366788  0.43936468 

Proportional hazard distribution
              prob        job    program
point  1 0.5305943 0.18769612 0.11557384
point  2 0.4694058 0.03554701 0.02551425
> summary(best)
$loglik
[1] -17630.53

$coefs
                 value         se         t      Pr(>|t|)
job.x1      0.98920818 0.01886271  52.44252  0.000000e+00
job.x2     -0.88030436 0.01944638 -45.26829  0.000000e+00
job.alpha  -0.07639304 0.04488823  -1.70185  8.881966e-02
program.x1  1.01366788 0.02594896  39.06391 2.190865e-307
program.x2  0.43936468 0.02679311  16.39842  1.567133e-59

$moments
              mean    variance         sd
job     0.11627646 0.005765670 0.07593201
program 0.07329935 0.002020091 0.04494542

> 
> 
> 
> cleanEx()
> nameEx("durdata")
> ### * durdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durdata
> ### Title: Duration data
> ### Aliases: durdata fit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(durdata)
> print(durdata)
        id         x1          x2 alpha       d     duration     state
   1:    1  1.3709584  0.07122244     0     job  1.339981518     unemp
   2:    2 -0.5646982  0.97029003     0 program 12.042632233     unemp
   3:    2 -0.5646982  0.97029003     1    none 10.810106005 onprogram
   4:    2 -0.6433724  1.41870706     1     job  3.482809953 onprogram
   5:    3  0.3631284  0.31003525     0     job 12.601142569     unemp
  ---                                                                 
8659: 4997 -0.7975076 -1.48190162     0     job  0.972218248     unemp
8660: 4998  1.1594035 -0.29899306     0     job  0.008490098     unemp
8661: 4999  0.6293510  0.21464983     0     job  0.392751482     unemp
8662: 5000  0.4939702  0.77323405     0 program  0.699146822     unemp
8663: 5000  0.4939702  0.77323405     1     job  0.335159060 onprogram
> print(fit)
iter12: estimate with 12 points, log-likelihood: -17748.8440

    job.x1     job.x2  job.alpha program.x1 program.x2 
 1.0137446 -1.0508249  0.3489083  0.9893138  0.5321487 

Proportional hazard distribution
               prob        job    program
point  1 0.29157846 0.09373431 0.02544403
point  2 0.22038012 0.18968171 0.14089098
point  3 0.15837641 0.03270904 0.04987646
point  4 0.07825787 0.01353982 0.01366420
point  5 0.07742932 0.04218788 0.13608671
point  6 0.06484456 0.57501873 0.02626592
point  7 0.03020201 0.00988496 0.05417690
point  8 0.02525533 0.07726190 0.00750763
point  9 0.02342887 0.67234569 0.46237676
point 10 0.01775873 0.02566763 0.00000000
point 11 0.01247817 0.03184753 1.32789750
point 12 0.00001015 0.17634105 0.03268234

iter11: estimate with 11 points, log-likelihood: -17748.8440
iter10: estimate with 10 points, log-likelihood: -17748.9610
iter9: estimate with 9 points, log-likelihood: -17750.3452
iter8: estimate with 8 points, log-likelihood: -17753.1866
iter7: estimate with 7 points, log-likelihood: -17753.4151
iter6: estimate with 6 points, log-likelihood: -17754.0187
iter5: estimate with 5 points, log-likelihood: -17756.0391
iter4: estimate with 4 points, log-likelihood: -17762.3815
iter3: estimate with 3 points, log-likelihood: -17774.9413
iter2: estimate with 2 points, log-likelihood: -17819.7238
iter1: estimate with 1 points, log-likelihood: -18360.0638
nullmodel: estimate with 1 points, log-likelihood: -21759.6029
> summary(fit[[1]])
$loglik
[1] -17748.84

$coefs
                value         se          t      Pr(>|t|)
job.x1      1.0137446 0.02341669  43.291547  0.000000e+00
job.x2     -1.0508249 0.02773636 -37.886188 8.986358e-291
job.alpha   0.3489083 0.08646537   4.035237  5.501613e-05
program.x1  0.9893138 0.03131700  31.590315 2.103293e-207
program.x2  0.5321487 0.04075256  13.058045  1.321665e-38

$moments
              mean   variance        sd
job     0.13478347 0.02485595 0.1576577
program 0.08890627 0.02564823 0.1601507

> 
> 
> 
> cleanEx()
> nameEx("geninv")
> ### * geninv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geninv
> ### Title: Moore-Penrose generalized inverse
> ### Aliases: geninv
> 
> ### ** Examples
> 
> # create a positive definite 5x5 matrix
> x <- crossprod(matrix(rnorm(25),5))
> # make it singular
> x[,2] <- x[,3]+x[,5]
> geninv(x)
            [,1]       [,2]        [,3]          [,4]        [,5]
[1,]  0.59600555  0.3834755  0.09734656 -0.1313454378  0.32338966
[2,]  0.11924663  0.1303762  0.03652770 -0.0006297084  0.12310145
[3,] -0.26835799 -0.9237478  0.18303012  0.3658260875 -0.61478567
[4,] -0.04643329 -0.1031814  0.12320759  0.6735326801 -0.05544032
[5,]  0.38760462  1.0541240 -0.14650242 -0.3664557958          NA
> 
> 
> 
> cleanEx()
> nameEx("mphcrm")
> ### * mphcrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm
> ### Title: Estimate a mixed proportional hazard model
> ### Aliases: mphcrm
> 
> ### ** Examples
> 
> data(durdata)
> head(durdata)
   id         x1          x2 alpha       d  duration     state
1:  1  1.3709584  0.07122244     0     job  1.339982     unemp
2:  2 -0.5646982  0.97029003     0 program 12.042632     unemp
3:  2 -0.5646982  0.97029003     1    none 10.810106 onprogram
4:  2 -0.6433724  1.41870706     1     job  3.482810 onprogram
5:  3  0.3631284  0.31003525     0     job 12.601143     unemp
6:  4  0.6328626 -0.13954856     0 program  1.296307     unemp
> risksets <- list(c('job','program'), c('job'))
> Fit <- mphcrm(d ~ x1+x2 + C(job,alpha) + ID(id) + D(duration) + S(alpha+1), data=durdata, 
+      risksets=risksets, control=mphcrm.control(threads=1,iters=2))
mphcrm 17:02:13 i:1 p:1 L:-18360.0638 g:6.05e-06 mp:1 rc:0.0059 e:-0.0000 t:0.3s
mphcrm 17:02:15 i:2 p:2 L:-17819.7238 g:1.59e-06 mp:0.42111 rc:0.014 e:0.6806 t:1.4s
> best <- Fit[[1]]
> summary(best)
$loglik
[1] -17819.72

$coefs
                 value         se          t      Pr(>|t|)
job.x1      0.98521270 0.01953227  50.440256  0.000000e+00
job.x2     -0.95001352 0.02031147 -46.772270  0.000000e+00
job.alpha  -0.04829748 0.04477020  -1.078786  2.807130e-01
program.x1  0.95155057 0.02556818  37.216196 2.275212e-281
program.x2  0.39202862 0.02619669  14.964815  5.238623e-50

$moments
              mean    variance         sd
job     0.11747649 0.005379709 0.07334650
program 0.07214243 0.001630363 0.04037775

> 
> 
> 
> cleanEx()
> nameEx("mphdist")
> ### * mphdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphdist
> ### Title: Extract the mixed proportional hazard distribution
> ### Aliases: mphdist mphdist.log mphmoments mphcov mphmoments.log
> ###   mphcov.log
> 
> ### ** Examples
> 
> # load a dataset and a precomputed fitted model
> data(durdata)
> best <- fit[[1]]
> mphdist(best)
                 prob         job      program
point  1 2.915785e-01 0.093734312 2.544403e-02
point  2 2.203801e-01 0.189681710 1.408910e-01
point  3 1.583764e-01 0.032709041 4.987646e-02
point  4 7.825787e-02 0.013539818 1.366420e-02
point  5 7.742932e-02 0.042187884 1.360867e-01
point  6 6.484456e-02 0.575018734 2.626592e-02
point  7 3.020201e-02 0.009884958 5.417690e-02
point  8 2.525533e-02 0.077261902 7.507626e-03
point  9 2.342887e-02 0.672345689 4.623768e-01
point 10 1.775873e-02 0.025667632 2.346578e-12
point 11 1.247817e-02 0.031847528 1.327898e+00
point 12 1.015002e-05 0.176341054 3.268234e-02
> mphmoments(best)
              mean   variance        sd
job     0.13478347 0.02485595 0.1576577
program 0.08890627 0.02564823 0.1601507
> mphcov.log(best)
              job    program
job     1.1008339  0.7598149
program 0.7598149 10.8234553
> 
> 
> 
> cleanEx()
> nameEx("timestr")
> ### * timestr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timestr
> ### Title: Prettyprint a time interval
> ### Aliases: timestr
> 
> ### ** Examples
> 
> timestr(1.3)
[1] "1.3s"
> timestr(73)
[1] "1m13s"
> timestr(4684)
[1] "1h18m"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.718 0.119 3.86 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
