
R Under development (unstable) (2019-07-05 r76784) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "durmod"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "durmod-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('durmod')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2p")
> ### * a2p
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: a2p
> ### Title: Convert probability parameters to probabilities
> ### Aliases: a2p p2a
> 
> ### ** Examples
> 
> # Draw 5 parameters
> a <- rnorm(5)
> a
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> # make 6 probabilities
> p <- a2p(a)
> p
[1] 0.10537775 0.05632270 0.12662055 0.04569198 0.51948206 0.14650496
> # convert back
> p2a(p)
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("a2p", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: datagen
> ### Title: Generate example data
> ### Aliases: datagen
> 
> ### ** Examples
> 
> data.table::setDTthreads(1)  # avoid screams from cran-testing
> dataset <- datagen(5000,80)
> print(dataset)
        id           x1         x2 alpha       d  duration     state
   1:    1 -0.626453811 -1.5163733     0     job  8.475950     unemp
   2:    2  0.183643324  0.6291412     0    none  6.067439     unemp
   3:    2  1.222338976  0.3455911     0    none  9.365923     unemp
   4:    2  0.796995558 -0.7141870     0     job  0.392882     unemp
   5:    3 -0.835628612 -1.6781940     0    none 23.167924     unemp
  ---                                                               
8584: 4999 -0.003494228  0.8939798     0 program  1.739756     unemp
8585: 4999 -0.003494228  0.8939798     1    none 67.404649 onprogram
8586: 5000  0.171580264  0.2573871     0    none 33.858670     unemp
8587: 5000  0.641995437  1.6364796     0 program  5.464844     unemp
8588: 5000  0.641995437  1.6364796     1    none 15.016888 onprogram
> risksets <- list(unemp=c("job","program"), onprogram="job")
> # just two iterations to save time
> Fit <- mphcrm(d ~ x1+x2 + ID(id) + D(duration) + S(alpha+1) + C(job,alpha),
+           data=dataset, risksets=risksets,
+           control=mphcrm.control(threads=1,iters=2))
mphcrm 22:24:43 i:1 p:1 L:-18110.6717 g:7.53e-06 mp:1 rc:0.035 e:-0.0000 t:0.3s
mphcrm 22:24:43 i:2 p:2 L:-17630.5327 g:8.92e-06 mp:0.46941 rc:0.0094 e:0.6913 t:0.8s
> best <- Fit[[1]]
> print(best)
Estimate with 2 points, log-likelihood: -17630.5327
     job.x1      job.x2   job.alpha  program.x1  program.x2 
 0.98920819 -0.88030436 -0.07639305  1.01366789  0.43936468 

Proportional hazard distribution
              prob        job    program
point  1 0.5305943 0.18769612 0.11557384
point  2 0.4694058 0.03554701 0.02551425
> summary(best)
$loglik
[1] -17630.53

$coefs
                 value         se         t      Pr(>|t|)
job.x1      0.98920819 0.01886271  52.44252  0.000000e+00
job.x2     -0.88030436 0.01944638 -45.26829  0.000000e+00
job.alpha  -0.07639305 0.04488823  -1.70185  8.881962e-02
program.x1  1.01366789 0.02594896  39.06391 2.190876e-307
program.x2  0.43936468 0.02679311  16.39842  1.567139e-59

$moments
              mean    variance         sd
job     0.11627645 0.005765670 0.07593201
program 0.07329935 0.002020091 0.04494542

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("datagen", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("durdata")
> ### * durdata
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: durdata
> ### Title: Duration data
> ### Aliases: durdata fit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(durdata)
> print(durdata)
         id         x1         x2 alpha    d    duration state
    1:    1 -0.3317134 -1.3406063     0  job   0.2309540 unemp
    2:    2 -0.6737615 -0.4659428     0 none  13.3273117 unemp
    3:    2 -1.6495569  1.5414345     0 none  44.9646136 unemp
    4:    2 -2.4295179  0.3709425     0 none 103.9240023 unemp
    5:    2 -1.6927724  1.4313630     0 none  28.2313727 unemp
   ---                                                        
11007: 4998 -0.4684765 -0.4846947     0  job  14.8222344 unemp
11008: 4999  0.9879840 -0.3212865     0  job   7.6286691 unemp
11009: 5000 -1.0083254 -1.5499469     0 none   3.0341806 unemp
11010: 5000 -1.6211791 -0.4308813     0 none   0.7595497 unemp
11011: 5000 -1.0292666  0.2842517     0  job   5.3428880 unemp
> print(fit)
iter11: estimate with 11 points, log-likelihood: -22444.4081

    job.x1     job.x2  job.alpha program.x1 program.x2 
 1.0008735 -1.0325680  0.2639588  1.0277278  0.4615064 

Proportional hazard distribution
               prob        job    program
point  1 0.29551603 0.18117206 0.04952916
point  2 0.17551306 0.02929003 0.01990073
point  3 0.14320792 0.06733470 0.10353076
point  4 0.13256398 0.06570729 0.02745677
point  5 0.07340761 0.02367727 0.11519289
point  6 0.06334622 0.15515941 0.33685578
point  7 0.03702530 0.51505700 0.38638621
point  8 0.02740006 0.59002793 0.11472997
point  9 0.02480169 0.00690884 0.03666506
point 10 0.01797659 0.01028509 0.00247507
point 11 0.00924152 1.29672040 0.01067561

iter10: estimate with 10 points, log-likelihood: -22444.5760
iter9: estimate with 9 points, log-likelihood: -22444.6837
iter8: estimate with 8 points, log-likelihood: -22444.8358
iter7: estimate with 7 points, log-likelihood: -22445.8447
iter6: estimate with 6 points, log-likelihood: -22449.1927
iter5: estimate with 5 points, log-likelihood: -22461.3014
iter4: estimate with 4 points, log-likelihood: -22470.3431
iter3: estimate with 3 points, log-likelihood: -22483.5537
iter2: estimate with 2 points, log-likelihood: -22568.1711
iter1: estimate with 1 points, log-likelihood: -23397.2902
nullmodel: estimate with 1 points, log-likelihood: -28974.1282
> summary(fit[[1]])
$loglik
[1] -22444.41

$coefs
                value         se          t      Pr(>|t|)
job.x1      1.0008735 0.01953029  51.247230  0.000000e+00
job.x2     -1.0325680 0.02423803 -42.601146  0.000000e+00
job.alpha   0.2639588 0.07260225   3.635683  2.785089e-04
program.x1  1.0277278 0.02595800  39.591941 1.256903e-320
program.x2  0.4615064 0.03425654  13.472069  4.824799e-41

$moments
              mean    variance         sd
job     0.13617702 0.028997653 0.17028697
program 0.08489246 0.009307573 0.09647576

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("durdata", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("geninv")
> ### * geninv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: geninv
> ### Title: Moore-Penrose generalized inverse
> ### Aliases: geninv
> 
> ### ** Examples
> 
> # create a positive definite 5x5 matrix
> x <- crossprod(matrix(rnorm(25),5))
> # make it singular
> x[,2] <- x[,3]+x[,5]
> geninv(x)
            [,1]       [,2]        [,3]          [,4]        [,5]
[1,]  0.59600555  0.3834755  0.09734656 -0.1313454378  0.32338966
[2,]  0.11924663  0.1303762  0.03652770 -0.0006297084  0.12310145
[3,] -0.26835799 -0.9237478  0.18303012  0.3658260875 -0.61478567
[4,] -0.04643329 -0.1031814  0.12320759  0.6735326801 -0.05544032
[5,]  0.38760462  1.0541240 -0.14650242 -0.3664557958          NA
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("geninv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mphcrm")
> ### * mphcrm
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mphcrm
> ### Title: Estimate a mixed proportional hazard model
> ### Aliases: mphcrm
> 
> ### ** Examples
> 
> data(durdata)
> head(durdata)
   id         x1         x2 alpha    d   duration state
1:  1 -0.3317134 -1.3406063     0  job   0.230954 unemp
2:  2 -0.6737615 -0.4659428     0 none  13.327312 unemp
3:  2 -1.6495569  1.5414345     0 none  44.964614 unemp
4:  2 -2.4295179  0.3709425     0 none 103.924002 unemp
5:  2 -1.6927724  1.4313630     0 none  28.231373 unemp
6:  2 -1.7235513 -0.1588299     0 none   9.888351 unemp
> risksets <- list(c('job','program'), c('job'))
> Fit <- mphcrm(d ~ x1+x2 + C(job,alpha) + ID(id) + D(duration) + S(alpha+1), data=durdata, 
+      risksets=risksets, control=mphcrm.control(threads=1,iters=2))
mphcrm 22:24:44 i:1 p:1 L:-23397.2902 g:7.42e-07 mp:1 rc:0.024 e:-0.0000 t:0.4s
mphcrm 22:24:45 i:2 p:2 L:-22568.1711 g:3.45e-05 mp:0.33279 rc:0.01 e:0.6361 t:0.9s
> best <- Fit[[1]]
> summary(best)
$loglik
[1] -22568.17

$coefs
                 value         se           t     Pr(>|t|)
job.x1      0.99014874 0.01602300  61.7954798 0.000000e+00
job.x2     -0.95838784 0.01774888 -53.9970972 0.000000e+00
job.alpha  -0.03352005 0.03936906  -0.8514313 3.945483e-01
program.x1  0.98379118 0.01992627  49.3715734 0.000000e+00
program.x2  0.33475435 0.02102882  15.9188353 1.994255e-56

$moments
              mean    variance         sd
job     0.11061256 0.003609301 0.06007746
program 0.07106368 0.001161028 0.03407386

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mphcrm", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mphcrm.callback")
> ### * mphcrm.callback
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mphcrm.callback
> ### Title: Default callback function for mphcrm
> ### Aliases: mphcrm.callback
> 
> ### ** Examples
> 
> callback <- function(fromwhere, opt, dataset, control, ...) {
+   # call the standard callback to print a diagnostic line
+   mphcrm.callback(fromwhere, opt, dataset, control, ...)
+   # print the distribution and two coefficients
+   if(fromwhere == 'full') {
+     print(round(mphdist(opt),6))
+     print(summary(opt)$coefs[c('job.alpha','job.x1'),])
+   }
+ }
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mphcrm.callback", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("mphdist")
> ### * mphdist
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: mphdist
> ### Title: Extract the mixed proportional hazard distribution
> ### Aliases: mphdist mphdist.log mphmoments mphmoments.log mphcov
> ###   mphcov.log
> 
> ### ** Examples
> 
> # load a dataset and a precomputed fitted model
> data(durdata)
> best <- fit[[1]]
> mphdist(best)
                prob         job     program
point  1 0.295516031 0.181172055 0.049529161
point  2 0.175513062 0.029290032 0.019900729
point  3 0.143207919 0.067334696 0.103530756
point  4 0.132563981 0.065707287 0.027456766
point  5 0.073407615 0.023677269 0.115192890
point  6 0.063346222 0.155159409 0.336855783
point  7 0.037025302 0.515057004 0.386386214
point  8 0.027400064 0.590027931 0.114729973
point  9 0.024801694 0.006908842 0.036665062
point 10 0.017976590 0.010285094 0.002475075
point 11 0.009241522 1.296720397 0.010675608
> mphmoments(best)
              mean    variance         sd
job     0.13617702 0.028997653 0.17028697
program 0.08489246 0.009307573 0.09647576
> mphcov.log(best)
             job   program
job     1.054228 0.4384890
program 0.438489 0.9104734
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("mphdist", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("smashlevels")
> ### * smashlevels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: smashlevels
> ### Title: Collapse levels of a factor
> ### Aliases: smashlevels
> 
> ### ** Examples
> 
> # create a factor with levels 30:60
> f <- factor(sample(30:60, 200, replace=TRUE))
> # combine 35-40 into a single level, 41-50 into a single level, and 51-60 into a single level
> g <- smashlevels(f, list(`35-40` = 35:40, `41-50` = 41:50, `51-60` = 51:60))
> table(g)
g
   30    31    32    33    34 35-40 41-50 51-60 
    9     5     5     3     4    46    67    61 
> # If the syntax permits, the backticks can be avoided.
> h <- smashlevels(f, list(young=30:34, pushing40 = 35:40, pushing50 = 41:50, fossilized = 51:120))
> table(h)
h
     young  pushing40  pushing50 fossilized 
        26         46         67         61 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("smashlevels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("timestr")
> ### * timestr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: timestr
> ### Title: Prettyprint a time interval
> ### Aliases: timestr
> 
> ### ** Examples
> 
> timestr(1.3)
[1] "1.3s"
> timestr(73)
[1] "1m13s"
> timestr(4684)
[1] "1h18m"
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("timestr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  3.412 0.1 3.533 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
