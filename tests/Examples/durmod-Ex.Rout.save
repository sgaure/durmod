
R Under development (unstable) (2019-06-28 r76752) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "durmod"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('durmod')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2p")
> ### * a2p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: a2p
> ### Title: Convert probability parameters to probabilities
> ### Aliases: a2p p2a
> 
> ### ** Examples
> 
> # Draw 5 parameters
> a <- rnorm(5)
> a
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> # make 6 probabilities
> p <- a2p(a)
> p
[1] 0.10537775 0.05632270 0.12662055 0.04569198 0.51948206 0.14650496
> # convert back
> p2a(p)
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> 
> 
> 
> 
> cleanEx()
> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate example data
> ### Aliases: datagen
> 
> ### ** Examples
> 
> data.table::setDTthreads(1)  # avoid screams from cran-testing
> dataset <- datagen(5000,80)
> print(dataset)
        id           x1         x2 alpha       d  duration     state
   1:    1 -0.626453811 -1.5163733     0     job  8.475950     unemp
   2:    2  0.183643324  0.6291412     0    none  6.067439     unemp
   3:    2  1.222338976  0.3455911     0    none  9.365923     unemp
   4:    2  0.796995558 -0.7141870     0     job  0.392882     unemp
   5:    3 -0.835628612 -1.6781940     0    none 23.167924     unemp
  ---                                                               
8584: 4999 -0.003494228  0.8939798     0 program  1.739756     unemp
8585: 4999 -0.003494228  0.8939798     1    none 67.404649 onprogram
8586: 5000  0.171580264  0.2573871     0    none 33.858670     unemp
8587: 5000  0.641995437  1.6364796     0 program  5.464844     unemp
8588: 5000  0.641995437  1.6364796     1    none 15.016888 onprogram
> risksets <- list(unemp=c("job","program"), onprogram="job")
> # just two iterations to save time
> Fit <- mphcrm(d ~ x1+x2 + ID(id) + D(duration) + S(alpha+1) + C(job,alpha),
+           data=dataset, risksets=risksets,
+           control=mphcrm.control(threads=1,iters=2))
mphcrm 00:50:56 i:1 p:1 L:-18110.6717 g:0.00376 mp:1 rc:0.035 e:-0.0000 t:0.4s
mphcrm 00:50:57 i:2 p:2 L:-17630.5327 g:0.00011 mp:0.46941 rc:0.0094 e:0.6913 t:1.0s
> best <- Fit[[1]]
> print(best)
Estimate with 2 points, log-likelihood: -17630.5327
     job.x1      job.x2   job.alpha  program.x1  program.x2 
 0.98920825 -0.88030442 -0.07639306  1.01366789  0.43936469 

Proportional hazard distribution
              prob        job    program
point  1 0.5305942 0.18769615 0.11557387
point  2 0.4694058 0.03554702 0.02551425
> summary(best)
$loglik
[1] -17630.53

$coefs
                 value         se          t      Pr(>|t|)
job.x1      0.98920825 0.01886271  52.442530  0.000000e+00
job.x2     -0.88030442 0.01944638 -45.268301  0.000000e+00
job.alpha  -0.07639306 0.04488823  -1.701851  8.881955e-02
program.x1  1.01366789 0.02594896  39.063912 2.190932e-307
program.x2  0.43936469 0.02679311  16.398420  1.567132e-59

$moments
              mean    variance         sd
job     0.11627647 0.005765672 0.07593202
program 0.07329936 0.002020092 0.04494543

> 
> 
> 
> cleanEx()
> nameEx("durdata")
> ### * durdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durdata
> ### Title: Duration data
> ### Aliases: durdata fit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(durdata)
> print(durdata)
         id         x1         x2 alpha    d    duration state
    1:    1 -0.3317134 -1.3406063     0  job   0.2309540 unemp
    2:    2 -0.6737615 -0.4659428     0 none  13.3273117 unemp
    3:    2 -1.6495569  1.5414345     0 none  44.9646136 unemp
    4:    2 -2.4295179  0.3709425     0 none 103.9240023 unemp
    5:    2 -1.6927724  1.4313630     0 none  28.2313727 unemp
   ---                                                        
11007: 4998 -0.4684765 -0.4846947     0  job  14.8222344 unemp
11008: 4999  0.9879840 -0.3212865     0  job   7.6286691 unemp
11009: 5000 -1.0083254 -1.5499469     0 none   3.0341806 unemp
11010: 5000 -1.6211791 -0.4308813     0 none   0.7595497 unemp
11011: 5000 -1.0292666  0.2842517     0  job   5.3428880 unemp
> print(fit)
iter10: estimate with 10 points, log-likelihood: -22444.4437

    job.x1     job.x2  job.alpha program.x1 program.x2 
 1.0009419 -1.0321635  0.2631124  1.0281170  0.4613390 

Proportional hazard distribution
               prob        job    program
point  1 0.29124598 0.19113386 0.05105720
point  2 0.17826310 0.02936591 0.01991611
point  3 0.14678968 0.06855022 0.10421919
point  4 0.14306577 0.06900042 0.02830728
point  5 0.07378302 0.02374826 0.11547125
point  6 0.06068950 0.15950141 0.35636092
point  7 0.05122232 0.56000248 0.30616111
point  8 0.02478382 0.00691305 0.03667940
point  9 0.01795984 0.01028534 0.00247337
point 10 0.01219696 1.25381602 0.01129966

iter9: estimate with 9 points, log-likelihood: -22444.8684
iter8: estimate with 8 points, log-likelihood: -22445.5053
iter7: estimate with 7 points, log-likelihood: -22445.8447
iter6: estimate with 6 points, log-likelihood: -22449.1927
iter5: estimate with 5 points, log-likelihood: -22459.1021
iter4: estimate with 4 points, log-likelihood: -22469.0497
iter3: estimate with 3 points, log-likelihood: -22483.5537
iter2: estimate with 2 points, log-likelihood: -22568.1711
iter1: estimate with 1 points, log-likelihood: -23397.2902
nullmodel: estimate with 1 points, log-likelihood: -28974.1282
> summary(fit[[1]])
$loglik
[1] -22444.44

$coefs
                value         se          t      Pr(>|t|)
job.x1      1.0009419 0.01949812  51.335307  0.000000e+00
job.x2     -1.0321635 0.02421473 -42.625436  0.000000e+00
job.alpha   0.2631124 0.07223999   3.642199  2.715595e-04
program.x1  1.0281170 0.02591834  39.667547 9.090808e-322
program.x2  0.4613390 0.03412898  13.517518  2.630429e-41

$moments
              mean    variance         sd
job     0.13660160 0.030330937 0.17415779
program 0.08468938 0.008893922 0.09430759

> 
> 
> 
> cleanEx()
> nameEx("geninv")
> ### * geninv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geninv
> ### Title: Moore-Penrose generalized inverse
> ### Aliases: geninv
> 
> ### ** Examples
> 
> # create a positive definite 5x5 matrix
> x <- crossprod(matrix(rnorm(25),5))
> # make it singular
> x[,2] <- x[,3]+x[,5]
> geninv(x)
            [,1]       [,2]        [,3]          [,4]        [,5]
[1,]  0.59600555  0.3834755  0.09734656 -0.1313454378  0.32338966
[2,]  0.11924663  0.1303762  0.03652770 -0.0006297084  0.12310145
[3,] -0.26835799 -0.9237478  0.18303012  0.3658260875 -0.61478567
[4,] -0.04643329 -0.1031814  0.12320759  0.6735326801 -0.05544032
[5,]  0.38760462  1.0541240 -0.14650242 -0.3664557958          NA
> 
> 
> 
> cleanEx()
> nameEx("mphcrm")
> ### * mphcrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm
> ### Title: Estimate a mixed proportional hazard model
> ### Aliases: mphcrm
> 
> ### ** Examples
> 
> data(durdata)
> head(durdata)
   id         x1         x2 alpha    d   duration state
1:  1 -0.3317134 -1.3406063     0  job   0.230954 unemp
2:  2 -0.6737615 -0.4659428     0 none  13.327312 unemp
3:  2 -1.6495569  1.5414345     0 none  44.964614 unemp
4:  2 -2.4295179  0.3709425     0 none 103.924002 unemp
5:  2 -1.6927724  1.4313630     0 none  28.231373 unemp
6:  2 -1.7235513 -0.1588299     0 none   9.888351 unemp
> risksets <- list(c('job','program'), c('job'))
> Fit <- mphcrm(d ~ x1+x2 + C(job,alpha) + ID(id) + D(duration) + S(alpha+1), data=durdata, 
+      risksets=risksets, control=mphcrm.control(threads=1,iters=2))
mphcrm 00:50:58 i:1 p:1 L:-23397.2902 g:7.42e-07 mp:1 rc:0.024 e:-0.0000 t:0.6s
mphcrm 00:51:00 i:2 p:2 L:-22568.1711 g:7.7e-05 mp:0.33279 rc:0.01 e:0.6361 t:1.7s
> best <- Fit[[1]]
> summary(best)
$loglik
[1] -22568.17

$coefs
                 value         se           t     Pr(>|t|)
job.x1      0.99014875 0.01602300  61.7954811 0.000000e+00
job.x2     -0.95838783 0.01774888 -53.9970979 0.000000e+00
job.alpha  -0.03351985 0.03936906  -0.8514262 3.945511e-01
program.x1  0.98379119 0.01992627  49.3715699 0.000000e+00
program.x2  0.33475436 0.02102882  15.9188346 1.994277e-56

$moments
              mean    variance         sd
job     0.11061255 0.003609301 0.06007746
program 0.07106368 0.001161028 0.03407385

> 
> 
> 
> cleanEx()
> nameEx("mphcrm.callback")
> ### * mphcrm.callback
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm.callback
> ### Title: Default callback function for mphcrm
> ### Aliases: mphcrm.callback
> 
> ### ** Examples
> 
> callback <- function(fromwhere, opt, dataset, control, ...) {
+   # call the standard callback to print a diagnostic line
+   mphcrm.callback(fromwhere, opt, dataset, control, ...)
+   # print the distribution and two coefficients
+   if(fromwhere == 'full') {
+     print(round(mphdist(opt),6))
+     print(summary(opt)$coefs[c('job.alpha','job.x1'),])
+   }
+ }
> 
> 
> 
> cleanEx()
> nameEx("mphdist")
> ### * mphdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphdist
> ### Title: Extract the mixed proportional hazard distribution
> ### Aliases: mphdist mphdist.log mphmoments mphmoments.log mphcov
> ###   mphcov.log
> 
> ### ** Examples
> 
> # load a dataset and a precomputed fitted model
> data(durdata)
> best <- fit[[1]]
> mphdist(best)
               prob         job     program
point  1 0.29124598 0.191133858 0.051057205
point  2 0.17826310 0.029365906 0.019916106
point  3 0.14678968 0.068550215 0.104219193
point  4 0.14306577 0.069000415 0.028307277
point  5 0.07378302 0.023748264 0.115471254
point  6 0.06068950 0.159501410 0.356360925
point  7 0.05122232 0.560002476 0.306161113
point  8 0.02478382 0.006913055 0.036679402
point  9 0.01795984 0.010285340 0.002473367
point 10 0.01219696 1.253816016 0.011299662
> mphmoments(best)
              mean    variance         sd
job     0.13660160 0.030330937 0.17415779
program 0.08468938 0.008893922 0.09430759
> mphcov.log(best)
              job   program
job     1.0544610 0.4314493
program 0.4314493 0.9184263
> 
> 
> 
> cleanEx()
> nameEx("timestr")
> ### * timestr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timestr
> ### Title: Prettyprint a time interval
> ### Aliases: timestr
> 
> ### ** Examples
> 
> timestr(1.3)
[1] "1.3s"
> timestr(73)
[1] "1m13s"
> timestr(4684)
[1] "1h18m"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.433 0.048 4.506 0.002 0.003 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
