
R Under development (unstable) (2019-06-27 r76743) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "durmod"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('durmod')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2p")
> ### * a2p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: a2p
> ### Title: Convert probability parameters to probabilities
> ### Aliases: a2p p2a
> 
> ### ** Examples
> 
> # Draw 5 parameters
> a <- rnorm(5)
> a
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> # make 6 probabilities
> p <- a2p(a)
> p
[1] 0.10537775 0.05632270 0.12662055 0.04569198 0.51948206 0.14650496
> # convert back
> p2a(p)
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> 
> 
> 
> 
> cleanEx()
> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate example data
> ### Aliases: datagen
> 
> ### ** Examples
> 
> data.table::setDTthreads(1)  # avoid screams from cran-testing
> dataset <- datagen(5000,80)
> print(dataset)
        id           x1         x2 alpha       d  duration     state
   1:    1 -0.626453811 -1.5163733     0     job  8.475950     unemp
   2:    2  0.183643324  0.6291412     0    none  6.067439     unemp
   3:    2  1.222338976  0.3455911     0    none  9.365923     unemp
   4:    2  0.796995558 -0.7141870     0     job  0.392882     unemp
   5:    3 -0.835628612 -1.6781940     0    none 23.167924     unemp
  ---                                                               
8584: 4999 -0.003494228  0.8939798     0 program  1.739756     unemp
8585: 4999 -0.003494228  0.8939798     1    none 67.404649 onprogram
8586: 5000  0.171580264  0.2573871     0    none 33.858670     unemp
8587: 5000  0.641995437  1.6364796     0 program  5.464844     unemp
8588: 5000  0.641995437  1.6364796     1    none 15.016888 onprogram
> risksets <- list(unemp=c("job","program"), onprogram="job")
> # just two iterations to save time
> Fit <- mphcrm(d ~ x1+x2 + ID(id) + D(duration) + S(alpha+1) + C(job,alpha),
+           data=dataset, risksets=risksets,
+           control=mphcrm.control(threads=1,iters=2))
mphcrm 11:14:15 i:1 p:1 L:-18110.6717 g:8.95e-05 mp:1 rc:0.0054 e:-0.0000 t:0.3s
mphcrm 11:14:16 i:2 p:2 L:-17630.5327 g:1.79e-06 mp:0.46941 rc:0.013 e:0.6913 t:1.1s
> best <- Fit[[1]]
> print(best)
Estimate with 2 points, log-likelihood: -17630.5327
     job.x1      job.x2   job.alpha  program.x1  program.x2 
 0.98920818 -0.88030436 -0.07639304  1.01366788  0.43936468 

Proportional hazard distribution
              prob        job    program
point  1 0.5305943 0.18769612 0.11557384
point  2 0.4694058 0.03554701 0.02551425
> summary(best)
$loglik
[1] -17630.53

$coefs
                 value         se         t      Pr(>|t|)
job.x1      0.98920818 0.01886271  52.44252  0.000000e+00
job.x2     -0.88030436 0.01944638 -45.26829  0.000000e+00
job.alpha  -0.07639304 0.04488823  -1.70185  8.881966e-02
program.x1  1.01366788 0.02594896  39.06391 2.190865e-307
program.x2  0.43936468 0.02679311  16.39842  1.567133e-59

$moments
              mean    variance         sd
job     0.11627646 0.005765670 0.07593201
program 0.07329935 0.002020091 0.04494542

> 
> 
> 
> cleanEx()
> nameEx("durdata")
> ### * durdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durdata
> ### Title: Duration data
> ### Aliases: durdata fit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(durdata)
> print(durdata)
         id         x1         x2 alpha       d   duration     state
    1:    1  0.3407997 -0.4101450     0    none  0.9474858     unemp
    2:    2 -0.7033403 -0.2611932     0    none 44.5049156     unemp
    3:    2 -1.8629370 -0.8300542     0 program 56.9759913     unemp
    4:    2 -1.8629370 -0.8300542     1     job 15.8062493 onprogram
    5:    3 -0.3795377 -1.0152817     0    none 32.5144465     unemp
   ---                                                              
10822: 4998 -1.3642833 -3.0074484     0     job  5.6259743     unemp
10823: 4999 -0.6336152 -0.1286428     0 program  3.8583857     unemp
10824: 4999 -0.6336152 -0.1286428     1    none  2.9296493 onprogram
10825: 4999 -1.1208652 -1.7977159     1     job  0.2998698 onprogram
10826: 5000 -1.7041043  0.4609900     0     job  3.8352219     unemp
> print(fit)
iter14: estimate with 14 points, log-likelihood: -22206.3045

    job.x1     job.x2  job.alpha program.x1 program.x2 
 1.0094834 -0.9961069  0.1424951  0.9834308  0.5020320 

Proportional hazard distribution
               prob        job    program
point  1 0.26323855 0.06130916 0.03064520
point  2 0.20096027 0.08838424 0.12804708
point  3 0.18444912 0.21199324 0.03970284
point  4 0.12611565 0.02800109 0.01631115
point  5 0.09247630 0.34079058 0.30337163
point  6 0.05217295 0.01957745 0.10684756
point  7 0.02616112 0.05903129 0.01021155
point  8 0.02211034 0.00652610 0.00720925
point  9 0.01431780 0.85179264 0.01577421
point 10 0.00885262 0.21998789 0.00000000
point 11 0.00670557 3.29813086 0.00000000
point 12 0.00219196 0.01534353 3.78431883
point 13 0.00023776 0.00000000 0.00000000
point 14 0.00001000 0.33051785 0.24635365

iter13: estimate with 13 points, log-likelihood: -22206.3045
iter12: estimate with 12 points, log-likelihood: -22206.3482
iter11: estimate with 11 points, log-likelihood: -22207.0626
iter10: estimate with 10 points, log-likelihood: -22207.2161
iter9: estimate with 9 points, log-likelihood: -22209.2485
iter8: estimate with 8 points, log-likelihood: -22210.4304
iter7: estimate with 7 points, log-likelihood: -22211.3796
iter6: estimate with 6 points, log-likelihood: -22216.7182
iter5: estimate with 5 points, log-likelihood: -22217.1804
iter4: estimate with 4 points, log-likelihood: -22225.9584
iter3: estimate with 3 points, log-likelihood: -22240.0720
iter2: estimate with 2 points, log-likelihood: -22317.4564
iter1: estimate with 1 points, log-likelihood: -23028.2462
nullmodel: estimate with 1 points, log-likelihood: -28652.5788
> summary(fit[[1]])
Warning in sqrt(diag(geninv(x$fisher, tol))) : NaNs produced
$loglik
[1] -22206.3

$coefs
                value         se          t      Pr(>|t|)
job.x1      1.0094834 0.01925972  52.414238  0.000000e+00
job.x2     -0.9961069 0.02308991 -43.140347  0.000000e+00
job.alpha   0.1424951 0.07135551   1.996975  4.585294e-02
program.x1  0.9834308 0.02787835  35.275795 3.956828e-258
program.x2  0.5020320 0.03543124  14.169191  3.597223e-45

$moments
             mean   variance        sd
job     0.1470551 0.08393375 0.2897132
program 0.0857588 0.03701780 0.1924001

> 
> 
> 
> cleanEx()
> nameEx("geninv")
> ### * geninv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geninv
> ### Title: Moore-Penrose generalized inverse
> ### Aliases: geninv
> 
> ### ** Examples
> 
> # create a positive definite 5x5 matrix
> x <- crossprod(matrix(rnorm(25),5))
> # make it singular
> x[,2] <- x[,3]+x[,5]
> geninv(x)
            [,1]       [,2]        [,3]          [,4]        [,5]
[1,]  0.59600555  0.3834755  0.09734656 -0.1313454378  0.32338966
[2,]  0.11924663  0.1303762  0.03652770 -0.0006297084  0.12310145
[3,] -0.26835799 -0.9237478  0.18303012  0.3658260875 -0.61478567
[4,] -0.04643329 -0.1031814  0.12320759  0.6735326801 -0.05544032
[5,]  0.38760462  1.0541240 -0.14650242 -0.3664557958          NA
> 
> 
> 
> cleanEx()
> nameEx("mphcrm")
> ### * mphcrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm
> ### Title: Estimate a mixed proportional hazard model
> ### Aliases: mphcrm
> 
> ### ** Examples
> 
> data(durdata)
> head(durdata)
   id         x1         x2 alpha       d   duration     state
1:  1  0.3407997 -0.4101450     0    none  0.9474858     unemp
2:  2 -0.7033403 -0.2611932     0    none 44.5049156     unemp
3:  2 -1.8629370 -0.8300542     0 program 56.9759913     unemp
4:  2 -1.8629370 -0.8300542     1     job 15.8062493 onprogram
5:  3 -0.3795377 -1.0152817     0    none 32.5144465     unemp
6:  3 -1.1491663  0.5399892     0    none 74.7215353     unemp
> risksets <- list(c('job','program'), c('job'))
> Fit <- mphcrm(d ~ x1+x2 + C(job,alpha) + ID(id) + D(duration) + S(alpha+1), data=durdata, 
+      risksets=risksets, control=mphcrm.control(threads=1,iters=2))
mphcrm 11:14:16 i:1 p:1 L:-23028.2462 g:0.00035 mp:1 rc:0.0014 e:-0.0000 t:0.3s
mphcrm 11:14:18 i:2 p:2 L:-22317.4564 g:2.08e-06 mp:0.34269 rc:0.0032 e:0.6428 t:1.7s
> best <- Fit[[1]]
> summary(best)
$loglik
[1] -22317.46

$coefs
                value         se          t     Pr(>|t|)
job.x1      0.9737768 0.01512191  64.395088 0.000000e+00
job.x2     -0.9378788 0.01744306 -53.768027 0.000000e+00
job.alpha  -0.1380364 0.03801568  -3.631039 2.835859e-04
program.x1  0.9599553 0.02338944  41.042254 0.000000e+00
program.x2  0.3925483 0.02361165  16.625197 2.627664e-61

$moments
              mean    variance         sd
job     0.10971585 0.003338856 0.05778283
program 0.06708476 0.001154511 0.03397809

> 
> 
> 
> cleanEx()
> nameEx("mphdist")
> ### * mphdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphdist
> ### Title: Extract the mixed proportional hazard distribution
> ### Aliases: mphdist mphdist.log mphmoments mphcov mphmoments.log
> ###   mphcov.log
> 
> ### ** Examples
> 
> # load a dataset and a precomputed fitted model
> data(durdata)
> best <- fit[[1]]
> mphdist(best)
                 prob          job      program
point  1 2.632385e-01 6.130916e-02 3.064520e-02
point  2 2.009603e-01 8.838424e-02 1.280471e-01
point  3 1.844491e-01 2.119932e-01 3.970284e-02
point  4 1.261157e-01 2.800109e-02 1.631115e-02
point  5 9.247630e-02 3.407906e-01 3.033716e-01
point  6 5.217295e-02 1.957745e-02 1.068476e-01
point  7 2.616112e-02 5.903129e-02 1.021155e-02
point  8 2.211034e-02 6.526103e-03 7.209252e-03
point  9 1.431780e-02 8.517926e-01 1.577421e-02
point 10 8.852619e-03 2.199879e-01 2.339859e-12
point 11 6.705569e-03 3.298131e+00 4.515028e-11
point 12 2.191961e-03 1.534353e-02 3.784319e+00
point 13 2.377612e-04 9.827843e-13 5.130536e-10
point 14 1.000005e-05 3.305178e-01 2.463536e-01
> mphmoments(best)
             mean   variance        sd
job     0.1470551 0.08393375 0.2897132
program 0.0857588 0.03701780 0.1924001
> mphcov.log(best)
               job    program
job      1.1088850 -0.1922289
program -0.1922289  8.8134434
> 
> 
> 
> cleanEx()
> nameEx("timestr")
> ### * timestr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timestr
> ### Title: Prettyprint a time interval
> ### Aliases: timestr
> 
> ### ** Examples
> 
> timestr(1.3)
[1] "1.3s"
> timestr(73)
[1] "1m13s"
> timestr(4684)
[1] "1h18m"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.066 0.16 4.248 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
