
R Under development (unstable) (2019-06-28 r76752) -- "Unsuffered Consequences"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "durmod"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('durmod')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("a2p")
> ### * a2p
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: a2p
> ### Title: Convert probability parameters to probabilities
> ### Aliases: a2p p2a
> 
> ### ** Examples
> 
> # Draw 5 parameters
> a <- rnorm(5)
> a
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> # make 6 probabilities
> p <- a2p(a)
> p
[1] 0.10537775 0.05632270 0.12662055 0.04569198 0.51948206 0.14650496
> # convert back
> p2a(p)
[1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078
> 
> 
> 
> 
> cleanEx()
> nameEx("datagen")
> ### * datagen
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: datagen
> ### Title: Generate example data
> ### Aliases: datagen
> 
> ### ** Examples
> 
> data.table::setDTthreads(1)  # avoid screams from cran-testing
> dataset <- datagen(5000,80)
> print(dataset)
        id           x1         x2 alpha       d  duration     state
   1:    1 -0.626453811 -1.5163733     0     job  8.475950     unemp
   2:    2  0.183643324  0.6291412     0    none  6.067439     unemp
   3:    2  1.222338976  0.3455911     0    none  9.365923     unemp
   4:    2  0.796995558 -0.7141870     0     job  0.392882     unemp
   5:    3 -0.835628612 -1.6781940     0    none 23.167924     unemp
  ---                                                               
8584: 4999 -0.003494228  0.8939798     0 program  1.739756     unemp
8585: 4999 -0.003494228  0.8939798     1    none 67.404649 onprogram
8586: 5000  0.171580264  0.2573871     0    none 33.858670     unemp
8587: 5000  0.641995437  1.6364796     0 program  5.464844     unemp
8588: 5000  0.641995437  1.6364796     1    none 15.016888 onprogram
> risksets <- list(unemp=c("job","program"), onprogram="job")
> # just two iterations to save time
> Fit <- mphcrm(d ~ x1+x2 + ID(id) + D(duration) + S(alpha+1) + C(job,alpha),
+           data=dataset, risksets=risksets,
+           control=mphcrm.control(threads=1,iters=2))
mphcrm 23:20:10 i:1 p:1 L:-18110.6717 g:0.0014 mp:1 rc:0.035 e:-0.0000 t:0.5s
mphcrm 23:20:10 i:2 p:2 L:-17630.5327 g:0.000101 mp:0.46941 rc:0.0094 e:0.6913 t:1.0s
> best <- Fit[[1]]
> print(best)
Estimate with 2 points, log-likelihood: -17630.5327
     job.x1      job.x2   job.alpha  program.x1  program.x2 
 0.98920825 -0.88030442 -0.07639303  1.01366789  0.43936469 

Proportional hazard distribution
              prob        job    program
point  1 0.5305942 0.18769615 0.11557387
point  2 0.4694058 0.03554701 0.02551425
> summary(best)
$loglik
[1] -17630.53

$coefs
                 value         se         t      Pr(>|t|)
job.x1      0.98920825 0.01886271  52.44253  0.000000e+00
job.x2     -0.88030442 0.01944638 -45.26830  0.000000e+00
job.alpha  -0.07639303 0.04488823  -1.70185  8.881969e-02
program.x1  1.01366789 0.02594896  39.06391 2.190947e-307
program.x2  0.43936469 0.02679311  16.39842  1.567136e-59

$moments
              mean    variance         sd
job     0.11627647 0.005765672 0.07593202
program 0.07329936 0.002020092 0.04494543

> 
> 
> 
> cleanEx()
> nameEx("durdata")
> ### * durdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: durdata
> ### Title: Duration data
> ### Aliases: durdata fit
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(durdata)
> print(durdata)
         id          x1         x2 alpha       d  duration     state
    1:    1 -0.89558948  0.8971190     0 program  3.613023     unemp
    2:    1 -0.89558948  0.8971190     1     job 29.202369 onprogram
    3:    2 -0.82379187 -1.3031311     0     job  1.726853     unemp
    4:    3 -1.04303377 -0.7629856     0    none 10.207379     unemp
    5:    3 -0.06233683  1.0905447     0 program  1.721472     unemp
   ---                                                              
11207: 4998 -1.40152696 -1.4707664     0    none 10.582515     unemp
11208: 4998  0.85579289 -0.9213214     0     job  2.819942     unemp
11209: 4999 -0.76746465 -0.9164688     0     job 17.449294     unemp
11210: 5000 -0.07113608  0.9132499     0    none 33.370384     unemp
11211: 5000  1.30242283  0.8796118     0     job  1.785957     unemp
> print(fit)
iter16: estimate with 16 points, log-likelihood: -22331.2944

    job.x1     job.x2  job.alpha program.x1 program.x2 
 1.0087053 -1.0390513  0.2521250  1.0021239  0.4980844 

Proportional hazard distribution
               prob          job      program
point  1 0.22786417 4.451047e-02   0.03940337
point  2 0.18982382 1.371810e-01   0.02447398
point  3 0.13752810 6.512020e-02   0.14221527
point  4 0.12201245 2.104923e-01   0.07003836
point  5 0.09516665 4.668385e-01   0.14437353
point  6 0.08914980 2.787447e-02   0.00720234
point  7 0.05445354 1.396257e-01   0.36574729
point  8 0.05320117 1.323418e-02   0.03995887
point  9 0.02794436 9.294330e-03   0.01216443
point 10 0.00140276 5.076990e-03   0.82144252
point 11 0.00078351 1.394700e-03   0.03882288
point 12 0.00021820 1.870101e+01   9.08120834
point 13 0.00018029 3.151220e+04   0.01562006
point 14 0.00017540 9.242537e+00 426.15681447
point 15 0.00008576 1.166473e+03   0.00000618
point 16 0.00001000 5.559579e-02   0.02752087

iter15: estimate with 15 points, log-likelihood: -22331.2944
iter14: estimate with 14 points, log-likelihood: -22331.8890
iter13: estimate with 13 points, log-likelihood: -22332.6498
iter12: estimate with 12 points, log-likelihood: -22332.7152
iter11: estimate with 11 points, log-likelihood: -22334.6720
iter10: estimate with 10 points, log-likelihood: -22334.9051
iter9: estimate with 9 points, log-likelihood: -22335.3128
iter8: estimate with 8 points, log-likelihood: -22336.0135
iter7: estimate with 7 points, log-likelihood: -22337.0988
iter6: estimate with 6 points, log-likelihood: -22339.3907
iter5: estimate with 5 points, log-likelihood: -22348.2316
iter4: estimate with 4 points, log-likelihood: -22357.4718
iter3: estimate with 3 points, log-likelihood: -22367.1478
iter2: estimate with 2 points, log-likelihood: -22427.4000
iter1: estimate with 1 points, log-likelihood: -23263.9496
nullmodel: estimate with 1 points, log-likelihood: -29057.9451
> summary(fit[[1]])
Warning in sqrt(diag(geninv(x$fisher, tol))) : NaNs produced
$loglik
[1] -22331.29

$coefs
                value         se          t      Pr(>|t|)
job.x1      1.0087053 0.01966983  51.281857  0.000000e+00
job.x2     -1.0390513 0.02360333 -44.021379  0.000000e+00
job.alpha   0.2521250 0.07113051   3.544541  3.948990e-04
program.x1  1.0021239 0.02824974  35.473737 2.492654e-261
program.x2  0.4980844 0.03548208  14.037634  2.177540e-44

$moments
             mean     variance         sd
job     5.9135026 179116.87866 423.222021
program 0.1564074     31.86202   5.644645

> 
> 
> 
> cleanEx()
> nameEx("geninv")
> ### * geninv
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: geninv
> ### Title: Moore-Penrose generalized inverse
> ### Aliases: geninv
> 
> ### ** Examples
> 
> # create a positive definite 5x5 matrix
> x <- crossprod(matrix(rnorm(25),5))
> # make it singular
> x[,2] <- x[,3]+x[,5]
> geninv(x)
            [,1]       [,2]        [,3]          [,4]        [,5]
[1,]  0.59600555  0.3834755  0.09734656 -0.1313454378  0.32338966
[2,]  0.11924663  0.1303762  0.03652770 -0.0006297084  0.12310145
[3,] -0.26835799 -0.9237478  0.18303012  0.3658260875 -0.61478567
[4,] -0.04643329 -0.1031814  0.12320759  0.6735326801 -0.05544032
[5,]  0.38760462  1.0541240 -0.14650242 -0.3664557958          NA
> 
> 
> 
> cleanEx()
> nameEx("mphcrm")
> ### * mphcrm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm
> ### Title: Estimate a mixed proportional hazard model
> ### Aliases: mphcrm
> 
> ### ** Examples
> 
> data(durdata)
> head(durdata)
   id          x1         x2 alpha       d  duration     state
1:  1 -0.89558948  0.8971190     0 program  3.613023     unemp
2:  1 -0.89558948  0.8971190     1     job 29.202369 onprogram
3:  2 -0.82379187 -1.3031311     0     job  1.726853     unemp
4:  3 -1.04303377 -0.7629856     0    none 10.207379     unemp
5:  3 -0.06233683  1.0905447     0 program  1.721472     unemp
6:  3 -0.06233683  1.0905447     1    none  1.214310 onprogram
> risksets <- list(c('job','program'), c('job'))
> Fit <- mphcrm(d ~ x1+x2 + C(job,alpha) + ID(id) + D(duration) + S(alpha+1), data=durdata, 
+      risksets=risksets, control=mphcrm.control(threads=1,iters=2))
mphcrm 23:20:11 i:1 p:1 L:-23263.9496 g:3.42e-05 mp:1 rc:0.027 e:-0.0000 t:0.5s
mphcrm 23:20:13 i:2 p:2 L:-22427.4000 g:9.7e-06 mp:0.34274 rc:0.008 e:0.6428 t:1.7s
> best <- Fit[[1]]
> summary(best)
$loglik
[1] -22427.4

$coefs
                value         se          t     Pr(>|t|)
job.x1      0.9832118 0.01584760  62.041701 0.000000e+00
job.x2     -0.9602432 0.01686111 -56.950170 0.000000e+00
job.alpha  -0.1208692 0.03528501  -3.425511 6.158447e-04
program.x1  0.9801404 0.02361827  41.499253 0.000000e+00
program.x2  0.3723644 0.02352814  15.826343 8.217892e-56

$moments
              mean    variance         sd
job     0.11084731 0.003636974 0.06030733
program 0.07001409 0.001325902 0.03641294

> 
> 
> 
> cleanEx()
> nameEx("mphcrm.callback")
> ### * mphcrm.callback
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphcrm.callback
> ### Title: Default callback function for mphcrm
> ### Aliases: mphcrm.callback
> 
> ### ** Examples
> 
> callback <- function(fromwhere, opt, dataset, control, ...) {
+   # call the standard callback to print a diagnostic line
+   mphcrm.callback(fromwhere, opt, dataset, control, ...)
+   # print the distribution and two coefficients
+   if(fromwhere == 'full') {
+     print(round(mphdist(opt),6))
+     print(summary(opt)$coefs[c('job.alpha','job.x1'),])
+   }
+ }
> 
> 
> 
> cleanEx()
> nameEx("mphdist")
> ### * mphdist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mphdist
> ### Title: Extract the mixed proportional hazard distribution
> ### Aliases: mphdist mphdist.log mphmoments mphmoments.log mphcov
> ###   mphcov.log
> 
> ### ** Examples
> 
> # load a dataset and a precomputed fitted model
> data(durdata)
> best <- fit[[1]]
> mphdist(best)
                 prob          job      program
point  1 2.278642e-01 4.451047e-02 3.940337e-02
point  2 1.898238e-01 1.371810e-01 2.447398e-02
point  3 1.375281e-01 6.512020e-02 1.422153e-01
point  4 1.220125e-01 2.104923e-01 7.003836e-02
point  5 9.516665e-02 4.668385e-01 1.443735e-01
point  6 8.914980e-02 2.787447e-02 7.202341e-03
point  7 5.445354e-02 1.396257e-01 3.657473e-01
point  8 5.320117e-02 1.323418e-02 3.995887e-02
point  9 2.794436e-02 9.294327e-03 1.216443e-02
point 10 1.402758e-03 5.076986e-03 8.214425e-01
point 11 7.835140e-04 1.394701e-03 3.882288e-02
point 12 2.181970e-04 1.870101e+01 9.081208e+00
point 13 1.802937e-04 3.151220e+04 1.562006e-02
point 14 1.754000e-04 9.242537e+00 4.261568e+02
point 15 8.576378e-05 1.166473e+03 6.183921e-06
point 16 9.999981e-06 5.559579e-02 2.752087e-02
> mphmoments(best)
             mean     variance         sd
job     5.9135026 179116.87866 423.222021
program 0.1564074     31.86202   5.644645
> mphcov.log(best)
              job   program
job     1.0391110 0.4895236
program 0.4895236 1.0280752
> 
> 
> 
> cleanEx()
> nameEx("timestr")
> ### * timestr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: timestr
> ### Title: Prettyprint a time interval
> ### Aliases: timestr
> 
> ### ** Examples
> 
> timestr(1.3)
[1] "1.3s"
> timestr(73)
[1] "1m13s"
> timestr(4684)
[1] "1h18m"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.964 1.258 4.426 0.003 0.003 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
